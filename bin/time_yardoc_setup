#!/usr/bin/env ruby 

require 'rubygems'
require 'bundler'
begin
  Bundler.setup(:default, :development)
rescue Bundler::BundlerError => e
  $stderr.puts e.message
  $stderr.puts "Run `bundle install` to install missing gems"
  exit e.status_code
end


require 'optparse' 
require 'ostruct'
require 'date'


class App
  NO_GEMFILE = <<-ERROR
  The application you specified does not have a Gemfile. This gem requires one to work.
  ERROR
  
  NO_INITIALIZERS = <<-ERROR
  The application you specified does not have a 'config/intializers' directory. This gem requires one to work.
  ERROR
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    
  end

  # Parse options, check arguments, then process the command
  def run
    if parsed_options? && arguments_valid? 
            
      process_arguments            
      process_command
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new do |opts|
        opts.banner = <<-BANNER
        == Synopsis 
          Given an application directory, sets up the inital configuration files
          to document with yard and yard_tii_extensions
          
        == Usage
          time_yardoc_setup /path/to/my_app
        
         == Options
           -h, --help          Displays help message
           -v, --version       Display the version, then exit
        
         == Author
           V. Orion Delwaterman
        BANNER
        opts.on('-v', '--version')    { output_version ; exit 0 }
        opts.on('-h', '--help')       { puts opts; exit }
        # TO DO - add additional options
      end
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      # TO DO - implement your real logic here
      true if @arguments.length == 1 
    end
    
    # Setup the arguments
    def process_arguments
      @path_to_app = Pathname.new(@arguments.first).expand_path
      puts "@path_to_app #{@path_to_app.inspect}"
      
      
      validate_gem_file!
      validate_initializers!
      
      @app_name = guess_app_name(@path_to_app)
      puts "@app_name #{@app_name}"
      
      # create_initializer
      # add_to_gemfile
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      puts @arguments.inspect
    end
    
    def guess_app_name(path)
      path.basename.to_s
    end
      
    def validate_gem_file!
      pn = @path_to_app + "Gemfile"
      unless pn.file?
        puts NO_GEMFILE
        exit(1)
      end
    end
    
    def validate_initializers!
      pn = @path_to_app + "config/initializers"
      unless pn.directory?
        puts NO_INITIALIZERS
        exit(1)
      end
    end
      
end


# TO DO - Add your Modules, Classes, etc


# Create and run the application
app = App.new(ARGV, STDIN)
app.run
